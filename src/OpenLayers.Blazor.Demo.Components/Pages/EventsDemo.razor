@page "/events"
@using OpenLayers.Blazor.Internal
@using Layer = OpenLayers.Blazor.Layer

<div class="card mt-2 mb-2">
    <div class="card-header">
        <h3 class="card-title">Events</h3>
        @if (_map != null)
        {
            <pre>
Zoom: @_map.Zoom
Center: @_map.Center
Extent: @_map.VisibleExtent
Pointer: @_pointer
</pre>
        }
    </div>
    <div class="card-body small font-monospace" style="height: 400px; overflow-y: auto;">
        @foreach (var m in _msg)
        {
            <span>
                @m<br/>
            </span>
        }
    </div>
</div>

<OpenStreetMap @ref="_map" Style="height: 500px" Class="card mb-2"
               InitialZoom="5" InitialCenter="new Coordinate(8.000, 45.896)"
               EnableEditShapes
               CenterChanged="@((o) => AddMessage($"CenterChanged {o}"))"
               OnClick="@((o) => AddMessage($"OnClick {o}"))"
               OnDoubleClick="@((o) => AddMessage($"OnDoubleClick {o}"))"
               VisibleExtentChanged="@((o) => AddMessage($"VisibleExtentChanged {o}"))"
               OnPointerMove="@((o) => _pointer = o)"
               ZoomChanged="@((o) => AddMessage($"ZoomChanged {o}"))"
               OnShapeClick="@((o) => AddMessage($"OnShapeClick {o}"))"
               OnFeatureClick="@((o) => AddMessage($"OnFeatureClick {o}"))"
               OnMarkerClick="@((o) => AddMessage($"OnMarkerClicked {o}"))"
               OnShapeAdded="@((o) => AddMessage($"OnShapeAdded {o}"))"
               OnShapeHover="@((o) => AddMessage($"OnShapeHover {o}"))"
               OnLayerAdded="@((o) => AddMessage($"OnLayerAdded {o}"))"
               OnLayerRemoved="@((o) => AddMessage($"OnLayerRemoved {o}"))"
               ConfigureJsMethod="myComponent.configureMap">
    <Layers>
        <Layer @ref="_layer" LayerType="LayerType.Vector" SourceType="SourceType.Vector" SelectionEnabled SelectionChanged="@((o) => AddMessage($"SelectionChanged {o}"))">
            <Shapes>
                <Circle Center="new(9.674681, 46.778543)" Radius="100000" Stroke="red" Fill="#77777777" StrokeThickness="5" OnChanged="@((o) => AddMessage($"Shape.OnChanged {o}"))"></Circle>
            </Shapes>
        </Layer>
    </Layers>
</OpenStreetMap>

<CodeView Source="EventsDemo.razor" />

@code {
    private OpenStreetMap? _map;
    private Layer? _layer;
    private Coordinate? _pointer;
    private readonly List<string> _msg = [];

    protected override void OnInitialized()
    {
        AddMessage("Page.OnInitialized");
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _map.ShapesLayer = _layer;
            AddMessage($"Page.OnAfterRender firstRender: {firstRender}");
        }

        base.OnAfterRender(firstRender);
    }

    private void AddMessage(string msg)
    {
        _msg.Insert(0, msg);
    }
}