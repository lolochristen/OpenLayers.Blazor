@page "/geojsondemo"
@rendermode Components.RenderMode.DefaultRenderMode
@using System.Text.Json
@using Shape = OpenLayers.Blazor.Shape

<div class="card mt-2 mb-2">
    <div class="card-header">
        <h3 class="card-title">GeoJson</h3>
    </div>
    <div class="card-body">
        @if (_loading)
        {
            <div class="spinner-grow" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <button class="btn btn-primary" @onclick="LoadGeoJson">Load geojson</button>
            <button class="btn btn-primary" @onclick="Reformat">Reformat</button>
        }
    </div>
</div>

<SwissMap @ref="_map" Style="height:800px;" Class="card" ShapeStyleCallback="GetShapeStyle"></SwissMap>

<CodeView Source="GeoJsonDemo.razor"/>

@code {
    private SwissMap _map = null!;
    private bool _loading;

    [Inject]
    private HttpClient HttpClient { get; set; }

    private async Task LoadGeoJson(MouseEventArgs obj)
    {
        _loading = true;
        // e.g. https://labs.karavia.ch/swiss-boundaries-geojson or https://api3.geo.admin.ch/services/sdiservices.html
        var json = await HttpClient.GetFromJsonAsync<JsonElement>("https://labs.karavia.ch/swiss-boundaries-geojson/geojson/2020/swissBOUNDARIES3D_1_3_TLM_LANDESGEBIET.geojson");
        await _map.LoadGeoJson(json);
        _loading = false;
    }

    private StyleOptions GetShapeStyle(Shape shape)
    {
        return new StyleOptions()
        {
            Stroke = new StyleOptions.StrokeOptions()
            {
                Color = "red",
                Width = 3,
                LineDash = new double[] { 4 }
            },
            Fill = new StyleOptions.FillOptions()
            {
                Color = shape.Properties["NAME"].ToString() == "Liechtenstein" ? "rgba(0, 255, 50, 0.5)" : "rgba(0, 0, 255, 0.3)"
            }
        };
    }

    private async Task Reformat()
    {
        foreach (var shape in _map.ShapesList)
        {
            shape.BorderSize = 5;
            shape.BorderColor = "green";
            shape.BackgroundColor = "rgba(0, 255, 50, 0.5)";
            await _map.UpdateShape(shape);
        }
    }
}