@page "/"
@rendermode Components.RenderMode.DefaultRenderMode
@using System.Text.Json

<div class="card mt-2 mb-2">

    <div class="card-header">
        <h1 class="card-title">OpenLayers.Blazor Demo/Examples</h1>
        <h5 class="card-subtitle">Coordinates in VL95/EPSG:2056</h5>
    </div>
    <div class="card-body">
        <div class="btn-toolbar gap-1" role="toolbar">
            @if (_map != null)
            {
                <select id="layerId" @bind="_map.LayerId">
                    <option value="ch.swisstopo.pixelkarte-farbe">ch.swisstopo.pixelkarte-farbe</option>
                    <option value="ch.swisstopo.pixelkarte-grau">ch.swisstopo.pixelkarte-grau</option>
                    <option value="ch.swisstopo.pixelkarte-farbe-winter">ch.swisstopo.pixelkarte-farbe-winter</option>
                    <option value="ch.swisstopo.swissimage">ch.swisstopo.swissimage</option>
                    <option value="ch.swisstopo.strassenkarte-200">ch.swisstopo.strassenkarte-200</option>
                    <option value="ch.swisstopo.hiks-dufour">ch.swisstopo.hiks-dufour</option>
                    <option value="ch.swisstopo.hiks-siegfried">ch.swisstopo.hiks-siegfried</option>
                    <option value="ch.swisstopo.swissalti3d-reliefschattierung">ch.swisstopo.swissalti3d-reliefschattierung</option>
                    <option value="ch.vbs.swissmilpilotschart">ch.vbs.swissmilpilotschart</option>
                </select>
            }
            <button class="btn btn-primary" @onclick="CenterLocation">Center to current location</button>
            <button class="btn btn-primary" @onclick="AddMarkLocation">Add Mark at current location</button>
            <button class="btn btn-secondary" @onclick="SetVisibleExtent">Beautiful</button>

            <input type="checkbox" class="btn-check" id="btninteract" autocomplete="off" @bind="_enableInteractions">
            <label class="btn btn-outline-info" for="btninteract">Interactive</label>
        </div>
        <div class="d-flex">
            <div class="input-group w-25">
                <label for="zoom" class="form-label small">Zoom @_zoom</label>
                <input type="range" class="form-range" id="zoom" min="1" max="15" step=".01" @bind="_zoom" @bind:event="oninput">
            </div>
            <div class="input-group w-25 m-lg-2">
                <label for="rotation" class="form-label small">Rotation @_rotation</label>
                <input type="range" class="form-range" id="rotation" step=".01" min="-6" max="6" @bind="_rotation" @bind:event="oninput">
            </div>
        </div>
        <p>
            <pre>
Center:@_map?.Center
Last Position: @_lastPosition
Altitude @(_altitude)m
Mouse Position: @_mousePosition
Visible Extent: @_map?.VisibleExtent
@_info
        </pre>
        </p>
    </div>
</div>

<SwissMap @ref="_map" OnClick="OnMapClick" OnPointerMove="OnPointerMove" OnRenderComplete="@(() => { _info = "Render complete: " + DateTime.Now.ToString("h:mm:ss.ms"); })" @bind-Zoom="_zoom" Style="height:800px;" Class="card" InteractionsEnabled="@_enableInteractions" @bind-Rotation="_rotation" ZoomSliderControl FullScreenControl>
    <Popup>
        <div id="popup" class="ol-box">
            @if (context is Marker marker)
            {
                <h3>@marker.Title</h3>
                <p>@marker.Coordinate.X,@marker.Coordinate.Y</p>
            }
        </div>
    </Popup>
    <Features>
        <Marker Type="MarkerType.MarkerPin" Coordinate="@("2604200/1197650")" Popup></Marker>
        <Marker Type="MarkerType.MarkerFlag" Coordinate="new Coordinate(2624200, 1177650)" Title="Hallo" BackgroundColor="#449933" Popup></Marker>
         <Line Coordinates="new double[][] { new double[] {2604200, 1197650}, new double[] { 2624200, 1177650 } }" BorderColor="cyan"></Line>
     </Features>
 </SwissMap>

 <CodeView Source="Index.razor" />

 @code {
    private SwissMap _map = null!;
    private Coordinate? _mousePosition;
    private double _zoom = 3;
    private decimal _altitude;
    private Coordinate? _lastPosition;
    private string _info = "";
    bool _enableInteractions = true;
    private double _rotation;

    [Inject]
    HttpClient HttpClient { get; set; }

    private async Task OnMapClick(Coordinate coordinate)
    {
        _lastPosition = coordinate;
        await GetAltitude(coordinate);
    }

    private void OnPointerMove(Coordinate coordinate)
    {
        _mousePosition = coordinate;
    }

    private async Task CenterLocation()
    {
        await _map.CenterToCurrentGeoLocation();
    }

    private async Task AddMarkLocation()
    {
        var coord = await _map.GetCurrentGeoLocation();
        _map.MarkersList.Add(new Marker { Type = MarkerType.MarkerPin, Coordinate = coord });
    }

    private async Task GetAltitude(Coordinate coordinate)
    {
        var result = await HttpClient.GetAsync($"https://api3.geo.admin.ch/rest/services/height?easting={coordinate.X}&elevation_model=COMB&northing={coordinate.Y}&sr=2056");
        var heightDoc = await JsonDocument.ParseAsync(await result.Content.ReadAsStreamAsync());
        _altitude = decimal.Parse(heightDoc.RootElement.GetProperty("height").GetString());
    }

    private async Task SetVisibleExtent()
    {
        await _map.SetVisibleExtent(new Extent(2766546.266902437, 1180272.9274316968, 2774559.233529014, 1186045.3471649496));
    }

}