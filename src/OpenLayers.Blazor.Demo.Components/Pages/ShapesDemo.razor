@page "/shapesdemo"
@rendermode Components.RenderMode.DefaultRenderMode
@using System.Text.Json
@using Point = OpenLayers.Blazor.Point
@using System.Drawing

<div class="card mt-2 mb-2">
    <div class="card-header">
        <h3 class="card-title">ShapesDemo</h3>
    </div>
    <div class="card-body">
        <button class="btn btn-primary" @onclick="AddShapes">Add some shapes</button>
        <button class="btn btn-primary" @onclick="RemoveShape">Remove the last</button>
        <p>
            <code>@_featureInfo</code>
        </p>
    </div>
</div>

<SwissMap @ref="_map" OnClick="OnMapClicked" OnFeatureClick="OnFeatureClicked" Style="height:800px;" Class="card">
    <Features>
        <Line Points="new []{new Coordinate(2604200, 1197650), new Coordinate(2624200, 1177650)}" BorderColor="cyan" BorderSize="4"></Line>
        <Circle Center="new Coordinate(2770557.824138796, 1197279.0774135895)" Radius="5000" BackgroundColor="#2222AA66"></Circle>
        <Point Coordinate="new Coordinate(2604200, 1197650)" BorderSize="4" BorderColor="red" BackgroundColor="cyan" Radius="3"></Point>
        <Polygon Points="new []{new Coordinate(2604900, 1207650), new Coordinate(2634200, 1177650), new Coordinate(2621200, 1177950)}" BorderColor="green" BorderSize="4" BackgroundColor="#2222AA66"></Polygon>
    </Features>
</SwissMap>

<CodeView Source="ShapesDemo.razor"/>

@code {
    private SwissMap _map = null!;
    private string _featureInfo;

    private void OnFeatureClicked(Feature feature)
    {
        _featureInfo = JsonSerializer.Serialize(feature);
    }

    private void OnMapClicked(Coordinate coordinate)
    {
        _map.ShapesList.Add(new Circle(coordinate, 2000) { BackgroundColor = "#33DD5588", });
    }

    private async Task AddShapes()
    {
        var random = new Random((int)DateTime.Now.Ticks);
        var extent = _map.LayersList[0].Extent;
        for (var i = 0; i < 50; i++)
        {
            _map.ShapesList.Add(
                new Point(new Coordinate(random.NextDouble() * (extent[2] - extent[0]) + extent[0], random.NextDouble() * (extent[3] - extent[1]) + extent[1]))
                {
                    BorderColor = $"#{random.Next(0, 255):x2}{random.Next(0, 255):x2}{random.Next(0, 255):x2}",
                    BorderSize = 4
                });
        }
    }

    private async Task RemoveShape()
    {
        _map.ShapesList.Remove(_map.ShapesList.Last());
    }
}