@page "/shapesdemo"
@rendermode Components.RenderMode.DefaultRenderMode
@using System.Text.Json
@using Point = OpenLayers.Blazor.Point
@using System.Drawing

<div class="card mt-2 mb-2">
    <div class="card-header">
        <h3 class="card-title">ShapesDemo</h3>
    </div>
    <div class="card-body">
        <button class="btn btn-primary" @onclick="AddShapes">Add some shapes</button>
        <button class="btn btn-primary" @onclick="RemoveShape">Remove the last</button>
        <button class="btn btn-primary" @onclick="ZoomToShapes">Zoom to Shapes</button>
        <button class="btn btn-primary" @onclick="MovePoint">Move</button>
        <p>
            <code>@_featureInfo</code>
        </p>
    </div>
</div>

<SwissMap @ref="_map" OnClick="OnMapClicked" OnFeatureClick="OnFeatureClicked" Style="height:800px;" Class="card">
    <Features>
        <Circle Center="@_circleCenter" Radius="5000" Fill="#2222AA66" Stroke="red" StrokeThickness="8"></Circle>
        <Point Coordinate="@_pos" StrokeThickness="4" Stroke="red" Fill="cyan" Radius="5"></Point>
        <Polygon Points="new []{new Coordinate(2604900, 1207650), new Coordinate(2634200, 1177650), new Coordinate(2621200, 1177950), new Coordinate(2551200, 1207650)}" Stroke="green" StrokeThickness="4" Fill="#2222AA66" Text="Ugly polygon" Font="20px sans-serif" TextColor="yellow"></Polygon>
        <Line Points="new []{new Coordinate(2734200, 1197650), new Coordinate(2754200, 1177650)}" Styles="new() { _lineStyle }"></Line>
    </Features>
</SwissMap>

<CodeView Source="ShapesDemo.razor"/>

@code {
    private SwissMap _map = null!;
    private string _featureInfo;
    private Coordinate _pos = new (2604200, 1197650);
    private Coordinate _circleCenter = new Coordinate(2770557.824138796, 1197279.0774135895);
    private Point _manualPoint;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _manualPoint = new Point(new Coordinate(2608200, 1167650)) { StrokeThickness = 4, Stroke = "blue", Fill = "cyan", Radius = 5 };
            _map.ShapesLayer.ShapesList.Add(_manualPoint);
        }
    }

    private StyleOptions _lineStyle = new StyleOptions()
    {
        Stroke = new StyleOptions.StrokeOptions() { Color = "cyan", Width = 5 },
        Text = new StyleOptions.TextOptions()
        {
            Text = "don't walk", Font = "20px sans-serif",
            Fill = new StyleOptions.FillOptions() { Color = "red" },
            Stroke = new StyleOptions.StrokeOptions() { Color = "white", Width = 2 },
            Placement = StyleOptions.TextPlacement.Line
        }
    };

    private void OnFeatureClicked(Feature feature)
    {
        _featureInfo = JsonSerializer.Serialize(feature);
    }

    private void OnMapClicked(Coordinate coordinate)
    {
        _map.ShapesList.Add(new Circle(coordinate, 2000) { Fill = "#33DD5588", });
    }

    private async Task AddShapes()
    {
        var random = new Random((int)DateTime.Now.Ticks);
        var extent = _map.LayersList[0].Extent;
        for (var i = 0; i < 50; i++)
        {
            _map.ShapesList.Add(
                new Point(new Coordinate(random.NextDouble() * (extent[2] - extent[0]) + extent[0], random.NextDouble() * (extent[3] - extent[1]) + extent[1]))
                {
                    Stroke = $"#{random.Next(0, 255):x2}{random.Next(0, 255):x2}{random.Next(0, 255):x2}",
                    StrokeThickness = 4
                });
        }
    }

    private async Task MovePoint()
    {
        _pos = new Coordinate(_pos.X + 2000, _pos.Y); // set new coordinate to trigger refresh

        for(int i = 0; i < 100; i++)
        {
            _circleCenter = new Coordinate(_circleCenter.X - 1000, _circleCenter.Y);
            StateHasChanged();
            await Task.Delay(1);

            _manualPoint.Coordinate = new Coordinate(_manualPoint.Coordinate.X + 500, _manualPoint.Coordinate.Y);
            await _manualPoint.UpdateCoordinates(); // manual created shapes require explicit update
        }
    }

    private async Task RemoveShape()
    {
        _map.ShapesList.Remove(_map.ShapesList.Last());
    }

    private async Task ZoomToShapes()
    {
        await _map.SetZoomToExtent(ExtentType.Geometries);
    }
}