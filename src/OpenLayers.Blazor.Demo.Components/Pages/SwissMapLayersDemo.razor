@page "/swissmaplayersdemo"
@rendermode Components.RenderMode.DefaultRenderMode
@using System.Xml.Linq
@using System.Threading
@using System.Text.Json

<div class="card mt-2 mb-2">
    <div class="card-header">
        <h3 class="card-title">SwissMapLayersDemo</h3>
    </div>
    <div class="card-body">
        <select @bind="_selectedLayer">
            @if (_layerList != null)
            {
                @foreach (var layer in _layerList)
                {
                    <option value="@layer.Key">@layer.Title (@layer.Key)</option>
                }
            }
        </select>
        <button class="btn btn-primary" @onclick="AddSelectedLayer">Add Layer</button>
    </div>
</div>

<SwissMap @ref="_map" Style="height:800px;" Class="card" OnClick="OnMapClick" OnFeatureClick="OnFeatureClick"></SwissMap>

@if (_currentFeature != null)
{
    <div class="card mt-2">
        <table class="table-info table-striped">
            @foreach (var prop in _currentFeature.Properties)
            {
                <tr>
                    <td class="table-secondary fw-bold">@prop.Key</td>
                    <td>@prop.Value</td>
                </tr>
            }
        </table>
    </div>
}

<CodeView Source="SwissMapLayersDemo.razor"/>

@code {
    private SwissMap _map = null!;
    private string? _selectedLayer;
    private List<Layer>? _layerList;
    private Feature? _currentFeature;

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadSwissGeoLayersIds();
        _selectedLayer = _layerList.First().Key;
    }

    private async Task LoadSwissGeoLayersIds()
    {
        var stream = await HttpClient.GetStreamAsync("https://wms.geo.admin.ch/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetCapabilities");
        var xdoc = await XDocument.LoadAsync(stream, LoadOptions.None, CancellationToken.None);
        var ns = xdoc.Root.GetDefaultNamespace();
        var layers = xdoc.Root.Element(ns + "Capability").Elements(ns + "Layer").Elements(ns + "Layer");


        _layerList = layers.Select(p =>
        {
            var layer = new Layer
            {
                SourceType = SourceType.TileWMS,
                Opacity = .7,
                Url = $"https://wms.geo.admin.ch/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&FORMAT=image%2Fpng&TRANSPARENT=true&LAYERS={p.Element(ns + "Name").Value}&LANG=en",
                Format = "image/png",
                Key = p.Element(ns + "Name").Value,
                Title = p.Element(ns + "Title").Value,
            };
            layer.SourceParameters["Abstract"] = p.Element(ns + "Abstract").Value;
            return layer;
        }).OrderBy(p => p.Key).ToList();
    }

    private void AddSelectedLayer()
    {
        if (_map.LayersList.Count > 1)
            _map.LayersList.RemoveAt(1);

        _map.LayersList.Add(_layerList.First(p => p.Key == _selectedLayer));
    }
    
    private async Task OnMapClick(Coordinate coordinate)
    {
        string url = $"https://api3.geo.admin.ch/rest/services/all/MapServer/identify?geometry={coordinate.X},{coordinate.Y}&geometryFormat=geojson&geometryType=esriGeometryPoint&imageDisplay=975,1117,96&lang=en&layers=all:{_selectedLayer}&limit=10&mapExtent={_map.VisibleExtent.X1},{_map.VisibleExtent.Y1},{_map.VisibleExtent.X2},{_map.VisibleExtent.Y2}&returnGeometry=true&sr=2056&timeInstant=2021&tolerance=10";
        var json = await HttpClient.GetFromJsonAsync<JsonElement>(url);
        var results = json.GetProperty("results");await _map.LoadGeoJson(results[0], _map.Options.CoordinatesProjection); // json is in EPSG:2056
    }

    private void OnFeatureClick(Feature feature)
    {
        _currentFeature = feature;
    }
}